## to configure my aiml environment
module load anaconda/2024.06-py312
module load cuda/11.7
source activate aiml
conda activate aiml 

## start running experiments by submitting .sh file
## export PYTORCH_ENABLE_MPS_FALLBACK='1'
sbatch /cluster/home/doconn10/experiments/run_dnn_weight_experiments.sh

## list all packages in environment aiml
conda list -n aiml 

## example printout of current status of all job runs
squeue --user=doconn10 
##   JOBID PARTITI2ON     NAME     USER ST       TIME  NODES NODELIST(REASON)
## 7833699     batch pytestjo doconn10  R      29:45      1 d1cmp017


## to show all jobs
sacct --user=doconn10

conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.7 -c pytorch -c nvidia


⁠srun -p gpu -t 4:00:00 -n 2 --mem=2g --gres=gpu:1 --pty bash ⁠
⁠srun -p interactive -t 4:00:00 -n 2 --mem=2g --gres=gpu:1 --pty bash ⁠

## to debug locally
export PYTORCH_ENABLE_MPS_FALLBACK='1'
ulimit -n 65535
python -i dnn_weight_noise.py --experiment-version {vNUMBER} --experiment-type dnn-train --learning-rates-dict "{'dnn1':[1e-3,1e-4,1e-5], 'dnn2':[1e-3,1e-4,1e-5]}" --cloud-environment local --debug-mode debug
python -i dnn_weight_noise.py --experiment-version {vNUMBER} --experiment-type dnn-load-model --pretrained-model-name "dnn_experiments_results.pth" --noise-vars "[0.1, 0.5, 1.0]" --cloud-environment local --debug-mode debug

## to run directly in HPC without submitting a job (broken pipeline):
## training
python -i dnn_weight_noise.py --experiment-version {vNUMBER} --experiment-type dnn-train --learning-rates-dict "{'dnn2a':[1e-3,1e-4,1e-5], 'dnn2bi':[1e-3,1e-4,1e-5], 'dnn2bii':[1e-3,1e-4,1e-5]}" --cloud-environment local --debug-mode debug

## noise experiments
python -i dnn_weight_noise.py --experiment-version {vNUMBER} --experiment-type dnn-load-model --pretrained-model-name "dnn_experiments_results.pth" --noise-vars "[0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]" --cloud-environment hpc --debug-mode debug

## to display the version of torch and see cuda compatibility
import torch
print(torch.__version__) 